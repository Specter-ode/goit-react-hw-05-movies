{"version":3,"file":"static/js/677.2c36a84a.chunk.js","mappings":"oLACA,EAAuB,yBAAvB,EAAwD,0BAAxD,EAA0F,0BAA1F,EAAiI,+BAAjI,EAAuK,yB,SC8BvK,EA5BkB,SAAC,GAAgB,IAC3BA,EAD0B,EAAbC,OACKC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAIxC,OAFKA,EADLA,EACgB,0CAAsCA,GACnC,sFAEjB,eAAIC,UAAWC,EAAf,UACE,UAAC,KAAD,CAAMC,GAAE,kBAAaL,GAAMG,UAAWC,EAAtC,WACE,gBAAKE,IAAKJ,EAAaK,IAAKN,EAAOE,UAAWC,EAAcI,MAAM,SAClE,cAAGL,UAAWC,EAAd,SAAwBH,QAHCD,MASjC,OAAO,eAAIG,UAAWC,EAAf,SAAwBP,M,iLC+BjC,EA5CuB,WACrB,OAA0BY,EAAAA,EAAAA,UAAS,CACjCX,OAAQ,GACRY,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAcC,EAAd,MAMAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,2FAC1BF,GAAS,SAAAG,GAAS,yBACbA,GADa,IAEhBN,SAAS,OAHe,mBAMLO,EAAAA,EAAAA,MANK,OAMlBC,EANkB,OAOxBL,GAAS,SAAAG,GAAS,yBACbA,GADa,IAEhBlB,QAAO,OAAKoB,EAAKC,cATK,gDAYxBN,GAAS,SAAAG,GAAS,yBACbA,GADa,IAEhBL,MAAK,UAdiB,yBAiBxBE,GAAS,SAAAG,GAAS,yBACbA,GADa,IAEhBN,SAAS,OAnBa,4EAAH,qDAuBzBK,MACC,IACH,IAAQjB,EAA2Bc,EAA3Bd,OAAQY,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAEzB,OACE,gCACGD,IAAW,SAACU,EAAA,EAAD,IACXT,IAAS,wDACV,SAACU,EAAA,EAAD,CAAYvB,OAAQA,QC3C1B,EAAwB,wBCUxB,EATiB,WACf,OACE,6BACE,eAAIK,UAAWC,EAAf,6BACA,SAAC,EAAD,S,iMCJAkB,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDV,EAAiB,mCAAG,sGACRK,EAAS,wBADD,uBACvBJ,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBU,EAAiB,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACRR,EAAS,gBAAiB,CAC/CG,OAAQ,CACNI,MAAAA,EACAC,KAAAA,KAJ2B,uBACvBZ,EADuB,EACvBA,KADuB,kBAOxBA,GAPwB,2CAAH,sDAUjBa,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAAS,UAAD,OAAWU,IADhB,uBAClBd,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZe,EAAY,mCAAG,WAAMD,GAAN,yFACHV,EAAS,UAAD,OAAWU,EAAX,aADL,uBAClBd,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZgB,EAAe,mCAAG,WAAMF,GAAN,yFACNV,EAAS,UAAD,OAAWU,EAAX,aADF,uBACrBd,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.js","components/TrendingMovies/TrendingMovies.js","webpack://goit-react-hw-05-movies/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.js","services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__0Owr9\",\"items\":\"MoviesList_items__u7yPt\",\"title\":\"MoviesList_title__PB2c8\",\"items__img\":\"MoviesList_items__img__Y6zFP\",\"link\":\"MoviesList_link__8rTGX\"};","import { Link } from 'react-router-dom';\nimport s from './MoviesList.module.css';\nimport PropTypes from 'prop-types';\nconst MovieList = ({ movies }) => {\n  const elements = movies.map(({ id, title, poster_path }) => {\n    poster_path\n      ? (poster_path = `https://image.tmdb.org/t/p/w500/${poster_path}`)\n      : (poster_path = 'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg');\n    return (\n      <li className={s.items} key={id}>\n        <Link to={`/movies/${id}`} className={s.link}>\n          <img src={poster_path} alt={title} className={s.items__img} width=\"200\" />\n          <p className={s.title}>{title}</p>\n        </Link>\n      </li>\n    );\n  });\n\n  return <ul className={s.list}>{elements}</ul>;\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default MovieList;\n","import { useState, useEffect } from 'react';\nimport { getTrendingMovies } from '../../services/movieApi';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Spinner from '../Spinner/Spinner';\n\nconst TrendingMovies = () => {\n  const [state, setState] = useState({\n    movies: [],\n    loading: false,\n    error: null,\n  });\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      setState(prevState => ({\n        ...prevState,\n        loading: true,\n      }));\n      try {\n        const data = await getTrendingMovies();\n        setState(prevState => ({\n          ...prevState,\n          movies: [...data.results],\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          error,\n        }));\n      } finally {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n        }));\n      }\n    };\n    fetchTrendingMovies();\n  }, []);\n  const { movies, loading, error } = state;\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {error && <p>Movies not found, try again</p>}\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default TrendingMovies;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"HomePage_title__UFLA3\"};","import TrendingMovies from '../../components/TrendingMovies/TrendingMovies';\nimport s from './HomePage.module.css'\nconst HomePage = () => {\n  return (\n    <main>\n      <h2 className={s.title}>Trending today</h2>\n      <TrendingMovies />\n    </main>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '34dbf9d1a3fd74b10bf7ab9eec59866f',\n    language: 'en-US',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance('/trending/movie/week');\n  return data;\n};\n\nexport const getMoviesBySearch = async (query, page = 1) => {\n  const { data } = await instance('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await instance(`/movie/${movieId}`);\n  return data;\n};\nexport const getMovieCast = async movieId => {\n  const { data } = await instance(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await instance(`/movie/${movieId}/reviews`);\n  return data;\n};\n"],"names":["elements","movies","map","id","title","poster_path","className","s","to","src","alt","width","useState","loading","error","state","setState","useEffect","fetchTrendingMovies","prevState","getTrendingMovies","data","results","Spinner","MoviesList","instance","axios","baseURL","params","api_key","language","getMoviesBySearch","query","page","getMovieById","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}