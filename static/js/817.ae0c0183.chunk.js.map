{"version":3,"file":"static/js/817.ae0c0183.chunk.js","mappings":"sQACA,EAAuB,uBAAvB,EAAsD,wBAAtD,EAAoF,sBAApF,EAAiH,uB,SC8CjH,EA1CiB,WACf,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,2FACrBN,GAAW,GADU,mBAGAO,EAAAA,EAAAA,IAAaJ,GAHb,OAGbK,EAHa,OAInBC,QAAQC,IAAI,SAAUF,GACtBV,EAAUU,EAAKG,MALI,gDAOnBT,EAAS,KAAMU,SAPI,yBASnBZ,GAAW,GATQ,4EAAH,qDAYpBM,MACC,CAACH,IACJ,IAAMU,EAAWhB,EAAOiB,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAIvC,OAFKA,EADLA,EACiB,0CAAsCA,GACnC,sFAElB,gBAAIC,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAOC,IAAKH,EAAcI,IAAKL,EAAMM,MAAM,KAAKC,OAAO,SACvE,cAAGL,UAAWC,EAAd,SAAuBH,MAFID,MAMjC,OACE,gCACGhB,IAAW,SAACyB,EAAA,EAAD,IACXvB,IAAS,uDACTJ,EAAO4B,OAAS,GAAI,eAAIP,UAAWC,EAAf,SAAwBN,KAAiB,qE,iMCxC9Da,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAiB,mCAAG,sGACRN,EAAS,wBADD,uBACvBlB,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjByB,EAAiB,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACRT,EAAS,gBAAiB,CAC/CG,OAAQ,CACNK,MAAAA,EACAC,KAAAA,KAJ2B,uBACvB3B,EADuB,EACvBA,KADuB,kBAOxBA,GAPwB,2CAAH,sDAUjB4B,EAAY,mCAAG,WAAMjC,GAAN,yFACHuB,EAAS,UAAD,OAAWvB,IADhB,uBAClBK,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZD,EAAY,mCAAG,WAAMJ,GAAN,yFACHuB,EAAS,UAAD,OAAWvB,EAAX,aADL,uBAClBK,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZ6B,EAAe,mCAAG,WAAMlC,GAAN,yFACNuB,EAAS,UAAD,OAAWvB,EAAX,aADF,uBACrBK,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH","sources":["webpack://goit-react-hw-05-movies/./src/pages/CastPage/CastPage.module.css?d5ae","pages/CastPage/CastPage.js","services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"CastPage_list__ievSZ\",\"items\":\"CastPage_items__Ew5U+\",\"img\":\"CastPage_img__DAvKf\",\"name\":\"CastPage_name__h9vn+\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from '../../services/movieApi';\nimport Spinner from '../../components/Spinner/Spinner';\nimport s from './CastPage.module.css';\nconst CastPage = () => {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieById = async () => {\n      setLoading(true);\n      try {\n        const data = await getMovieCast(movieId);\n        console.log('data: ', data);\n        setActors(data.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieById();\n  }, [movieId]);\n  const elements = actors.map(({ id, name, profile_path }) => {\n    profile_path\n      ? (profile_path = `https://image.tmdb.org/t/p/w500/${profile_path}`)\n      : (profile_path = 'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg');\n    return (\n      <li className={s.items} key={id}>\n        <img className={s.img} src={profile_path} alt={name} width=\"97\" height=\"150\" />\n        <p className={s.name}>{name}</p>\n      </li>\n    );\n  });\n  return (\n    <>\n      {loading && <Spinner />}\n      {error && <p>Movies not found, try again</p>}\n      {actors.length > 0 ? <ul className={s.list}>{elements}</ul> : <p>We don't have information about cast</p>}\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '34dbf9d1a3fd74b10bf7ab9eec59866f',\n    language: 'en-US',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance('/trending/movie/week');\n  return data;\n};\n\nexport const getMoviesBySearch = async (query, page = 1) => {\n  const { data } = await instance('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await instance(`/movie/${movieId}`);\n  return data;\n};\nexport const getMovieCast = async movieId => {\n  const { data } = await instance(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await instance(`/movie/${movieId}/reviews`);\n  return data;\n};\n"],"names":["useState","actors","setActors","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchMovieById","getMovieCast","data","console","log","cast","message","elements","map","id","name","profile_path","className","s","src","alt","width","height","Spinner","length","instance","axios","baseURL","params","api_key","language","getTrendingMovies","getMoviesBySearch","query","page","getMovieById","getMovieReviews"],"sourceRoot":""}