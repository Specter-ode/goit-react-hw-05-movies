{"version":3,"file":"static/js/602.2c94c969.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.js","webpack://goit-react-hw-05-movies/./src/components/MovieSearchForm/MovieSearchForm.module.css?70b3","components/MovieSearchForm/MovieSearchForm.js","components/MovieSearchBar/MovieSearchBar.js","pages/MoviesPage/MoviesPage.js","services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__0Owr9\",\"items\":\"MoviesList_items__u7yPt\",\"title\":\"MoviesList_title__PB2c8\",\"items__img\":\"MoviesList_items__img__Y6zFP\",\"link\":\"MoviesList_link__8rTGX\"};","import { Link } from 'react-router-dom';\nimport s from './MoviesList.module.css';\nimport PropTypes from 'prop-types';\nconst MovieList = ({ movies }) => {\n  const elements = movies.map(({ id, title, poster_path }) => {\n    poster_path\n      ? (poster_path = `https://image.tmdb.org/t/p/w500/${poster_path}`)\n      : (poster_path = 'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg');\n    return (\n      <li className={s.items} key={id}>\n        <Link to={`/movies/${id}`} className={s.link}>\n          <img src={poster_path} alt={title} className={s.items__img} width=\"200\" />\n          <p className={s.title}>{title}</p>\n        </Link>\n      </li>\n    );\n  });\n\n  return <ul className={s.list}>{elements}</ul>;\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default MovieList;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"MovieSearchForm_btn__akjwk\",\"form\":\"MovieSearchForm_form__PD1EN\",\"input\":\"MovieSearchForm_input__L3jrA\"};","import s from './MovieSearchForm.module.css';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nconst MovieSearchForm = ({ catchSubmitInfo }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    catchSubmitInfo(query);\n    setQuery('');\n  };\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        <input className={s.input} name=\"search\" value={query} onChange={handleChange}></input>\n      </label>\n      <button className={s.btn} type=\"submit\">\n        search\n      </button>\n    </form>\n  );\n};\n\nMovieSearchForm.propTypes = {\n  catchSubmitInfo: PropTypes.func.isRequired,\n};\nexport default MovieSearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesBySearch } from '../../services/movieApi';\nimport { toast } from 'react-toastify';\nimport MovieSearchForm from '../MovieSearchForm/MovieSearchForm';\nimport MoviesList from '../MoviesList/MoviesList';\nimport Spinner from '../Spinner/Spinner';\n\nconst MovieSearchBar = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  // const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    const fetchMoviesBySearch = async () => {\n      setLoading(true);\n      try {\n        const data = await getMoviesBySearch(query);\n        setMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (query) {\n      fetchMoviesBySearch();\n    }\n  }, [query]);\n  const handleFormSubmit = searchValue => {\n    // setQuery(searchValue);\n    if (!searchValue) {\n      toast.error(`Search field is empty`, {\n        theme: 'colored',\n      });\n      return;\n    }\n    setSearchParams({ query: searchValue });\n  };\n  return (\n    <div>\n      {error && <p>Movies not found, try again</p>}\n      <MovieSearchForm catchSubmitInfo={handleFormSubmit} />\n      {loading && <Spinner />}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </div>\n  );\n};\n\nexport default MovieSearchBar;\n","import MovieSearchBar from '../../components/MovieSearchBar/MovieSearchBar';\n\nconst MoviePage = () => {\n  return (\n    <main>\n      <h2>Search movie</h2>\n      <MovieSearchBar />\n    </main>\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '34dbf9d1a3fd74b10bf7ab9eec59866f',\n    language: 'en-US',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance('/trending/movie/week');\n  return data;\n};\n\nexport const getMoviesBySearch = async (query, page = 1) => {\n  const { data } = await instance('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await instance(`/movie/${movieId}`);\n  return data;\n};\nexport const getMovieCast = async movieId => {\n  const { data } = await instance(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await instance(`/movie/${movieId}/reviews`);\n  return data;\n};\n"],"names":["elements","movies","map","id","title","poster_path","className","s","to","src","alt","width","catchSubmitInfo","useState","query","setQuery","onSubmit","e","preventDefault","name","value","onChange","target","type","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchMoviesBySearch","getMoviesBySearch","data","results","message","searchValue","toast","theme","Spinner","length","MoviesList","instance","axios","baseURL","params","api_key","language","getTrendingMovies","page","getMovieById","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}